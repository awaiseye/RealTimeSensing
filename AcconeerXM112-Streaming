
# -- coding: utf-8 --
"""
Created on Wed Nov 10 00:11:04 2021

@author: Aqeel Ahmed
"""

import argparse
import sys
import time
import serial
import struct
import numpy as np




class ModuleError(Exception):
    """
    One of the error bits was set in the module
    """
    pass


class ModuleCommunication(object):
    """
    Simple class to communicate with the module software
    """

    def __init__(self, port, rtscts):
        self._port = serial.Serial(port, 115200, rtscts=rtscts,
                                   exclusive=True, timeout=2)
    def change_baud(self, baud):
        self._port.baudrate = 3000000

    def read_packet_type(self, type):
        """
        Read any packet of type. Any packages received with
        another type is discarded.
        """
        while True:
            header, payload = self.read_packet()
            if header[3] == type:
                break
        return header, payload

    def read_packet(self):
        header = self._port.read(4)
        length = int.from_bytes(header[1:3], byteorder='little')

        data = self._port.read(length + 1)
        
        assert data[-1] == 0xCD
        payload = data[:-1]
        return header, payload

    def register_write(self, addr, value):
        """
        Write a register
        """
        data = bytearray()
        data.extend(b'\xcc\x05\x00\xf9')
        data.append(addr)
        data.extend(value.to_bytes(4, byteorder='little', signed=False))
        data.append(0xcd)
        self._port.write(data)
        header, payload = self.read_packet_type(0xF5)
        assert payload[0] == addr

    def register_read(self, addr):
        """
        Read a register
        """
        data = bytearray()
        data.extend(b'\xcc\x01\x00\xf8')
        data.append(addr)
        data.append(0xcd)
        self._port.write(data)
        header, payload = self.read_packet_type(0xF6)
        assert payload[0] == addr
        return int.from_bytes(payload[1:5], byteorder='little', signed=False)

    def buffer_read(self, offset):
        """
        Read the buffer
        """
        data = bytearray()
        data.extend(b'\xcc\x03\x00\xfa\xe8')
        data.extend(offset.to_bytes(2, byteorder='little', signed=False))
        data.append(0xcd)
        self._port.write(data)

        header, payload = self.read_packet_type(0xF7)
        assert payload[0] == 0xE8
        return payload[1:]

    def read_stream(self):
        header, payload = self.read_packet_type(0xFE)
        return payload

    @staticmethod
    def _check_error(status):
        ERROR_MASK = 0xFFFF0000
        if status & ERROR_MASK != 0:
            ModuleError(f"Error in module, status: 0x{status:08X}")

    @staticmethod
    def _check_timeout(start, max_time):
        if (time.monotonic() - start) > max_time:
            raise TimeoutError()

    def _wait_status_set(self, wanted_bits, max_time):
        """
        Wait for wanted_bits bits to be set in status register
        """
        start = time.monotonic()

        while True:
            status = self.register_read(0x6)
            self._check_timeout(start, max_time)
            self._check_error(status)

            if status & wanted_bits == wanted_bits:
                return
            time.sleep(0.1)

    def wait_start(self):
        """
        Poll status register until created and activated
        """
        ACTIVATED_AND_CREATED = 0x3
        self._wait_status_set(ACTIVATED_AND_CREATED, 3)

    def wait_for_data(self, max_time):
        """
        Poll status register until data is ready
        """
        DATA_READY = 0x00000100
        self._wait_status_set(DATA_READY, max_time)


def polling_mode(com, duration):
    # Wait for it to start
    com.wait_start()
    print('Distance mode activated.')

    # Read out distance start
    dist_start = com.register_read(0x81)
    print(f'dist_start={dist_start / 1000} m')

    dist_length = com.register_read(0x82)
    print(f'dist_length={dist_length / 1000} m')

    start = time.monotonic()
    while time.monotonic() - start < duration:
        com.register_write(3, 4)
        # Wait for data read
        com.wait_for_data(1)
        dist_count = com.register_read(0xB0)
        print('                                               ', end='\r')
        print(f'Detected {dist_count} peaks:', end='')
        for count in range(dist_count):
            dist_distance = com.register_read(0xB1 + 2 * count)
            dist_amplitude = com.register_read(0xB2 + 2 * count)
            print(f' dist_{count}_distance={dist_distance / 1000} m', end='')
            print(f' dist_{count}_amplitude={dist_amplitude}', end='')
        print(f'', end='', flush=True)
        time.sleep(0.3)


def streaming_mode():
    
    while True:
        data=[]
        stream = com.read_stream()
        assert stream[0] == 0xFD
        buffer = stream[26:]
        for i in range(0, len(buffer), 2):
            a1 = struct.unpack('<e', buffer[i:i + 2])
            for a in a1:
                data.append(a)
        print(len(data))
        print('Data Acquisition ')
    return data





def module_software_test(port, flowcontrol, streaming, duration):
    """
    A simple example demonstrating how to use the distance detector
    """
    print(f'Communicating with module software on port {port}')

   
    global com
    com = ModuleCommunication(port, flowcontrol)


    # Make sure that module is stopped
    com.register_write(0x03, 0)

    # Give some time to stop (status register could be polled too)
    time.sleep(0.5)

    # Clear any errors and status
    com.register_write(0x3, 4)

    # Read product ID
    product_identification = com.register_read(0x10)
    print(f'product_identification=0x{product_identification:08X}')

    version = com.buffer_read(0)
    print(f'Software version: {version}')

    if streaming:
        com.register_write(5, 1)           # streaming control  UART data streaming enabled      
        com.register_write(0x2, 0x02)      # Mode Selection 
        com.register_write(0x23, 150000)   # Update Rate
        global baudrate
        baudrate = 3000000
        com.register_write(0x07, baudrate)  # bauad rate
        com.change_baud(baudrate)
        com.register_write(0x25, 3)         #Sensor Active Power mode
        com.register_write(0x28, 2)         #profile selection
        com.register_write(0x22, 2)         #Repitition Mode
        com.register_write(0x20, 400)       # Range Start
        com.register_write(0x21, 600)       # Range Stop
        com.register_write(0x24, 500)       #Gain
        com.register_write(0x29, 2)         #Down Sampling
        com.register_write(0x30, 5)         #HWAAS
        com.register_write(0x40, 0)         #Req Bin Count
        com.register_write(0x31, 1)         #Noise Level Normalization
        com.register_write(0x32, 0)         #Max Sig Attenuation
        com.register_write(0x26, 0)         #TX Disable
        com.register_write(0x33, 1)         #Asynchronos Measurement
        com.register_write(0x25, 3)         #Sensor Power Mode
        com.register_write(0x34, 6)         #MUR
        com.register_write(0x05, 1)         #Enable UART data streaming
        com.register_write(3, 3)            #Create and Activate Service
    else:
        # Set mode to 'distance'
        com.register_write(0x2, 0x200)

    # Activate and start
    #          com.register_write(3, 3)

    if streaming:

        streaming_mode()



    else:
        polling_mode(com, duration)

    print()
    print('End of example')
    com.register_write(0x03, 0)

from tensorflow import keras
def gesture_prediction(data):
    data=np.array(data)
    print(data.shape)
    gesture = data.reshape((sweeps, samples))
    gesture = np.swapaxes(gesture, 0, 1)
    gesture = np.abs(np.fft.fftshift(np.fft.fft(gesture), axes=(1,)))
    gesture = np.expand_dims(gesture, axis=-1)
    gesture = np.expand_dims(gesture, axis=0)
    print(gesture.shape)
    model = keras.models.load_model('E:\\SPCAI\\Dataset\\gestures.h5')
    if np.argmax(model.predict(gesture))==0:

        print("Swipe")
    elif np.argmax(model.predict(gesture))==1:
        print('Zoom Out')
    else:
        print('No gesture')



def main():
    """
    Main entry function
    """
    parser = argparse.ArgumentParser(description='Test UART communication')
    parser.add_argument('--port', default="COM3",
                        help='Port to use, e.g. COM1 or /dev/ttyUSB0')
    parser.add_argument('--no-rtscts', action='store_true',
                        help='XM132 and XM122 use rtscts, XM112 does not')
    parser.add_argument('--duration', default=1,
                        help='Duration of the example', type=int)
    parser.add_argument('--streaming', action='store_true',
                        help='Use UART streaming protocol')

    args = parser.parse_args()
    module_software_test(args.port, args.no_rtscts, not args.streaming, args.duration)




if __name__ == "__main__":

    sys.exit(main())

